<label>
    @localizer["Gender"]
</label>
<div class="mb-3">
    <div class="btn-group" role="group" aria-label="@localizer["Gender"]">
        <button type="button"
                class="btn @(Model.Male ? "btn-secondary" : "btn-light")"
                aria-label="@localizer["Male"]"
                @onclick="() => { Model.Male = true; ModelChanged.InvokeAsync(Model); MaleChanged.InvokeAsync(Model.Male); }">
            @localizer["Male"]
        </button>
        <button type="button"
                class="btn  @(!Model.Male ? "btn-secondary" : "btn-light")"
                aria-label="@localizer["Female"]"
                @onclick="() => { Model.Male = false; ModelChanged.InvokeAsync(Model); MaleChanged.InvokeAsync(Model.Male); }">
            @localizer["Female"]
        </button>
    </div>
</div>

<label>
    @localizer["Age"]
</label>
<div class="input-group mb-3">
    <input type="number"
           class="form-control @(Model.AgeValid ? "is-valid" : "is-invalid")"
           placeholder="@localizer["Age"]"
           aria-label="@localizer["Age"]"
           min="@Model.AgeMinMax.min"
           max="@Model.AgeMinMax.max"
           @bind="Model.Age"
           @bind:event="oninput"
           @onchange="() => ModelChanged.InvokeAsync(Model)" />
</div>

@if (Model.Male)
{
    <label>
        @localizer["Chest (mm)"]
    </label>
    <div class="input-group mb-3">
        <input type="number"
               class="form-control @(Model.ChestMmValid ? "is-valid" : "is-invalid")"
               placeholder="@localizer["Chest (mm)"]"
               aria-label="@localizer["Chest (mm)"]"
               min="@Model.ChestMmMinMax.min"
               max="@Model.ChestMmMinMax.max"
               @bind="Model.ChestMm"
               @bind:event="oninput"
               @onchange="() => ModelChanged.InvokeAsync(Model)" />
    </div>

    <label>
        @localizer["Abdomen (mm)"]
    </label>
    <div class="input-group mb-3">
        <input type="number"
               class="form-control @(Model.AbdomenMmValid ? "is-valid" : "is-invalid")"
               placeholder="@localizer["Abdomen (mm)"]"
               aria-label="@localizer["Abdomen (mm)"]"
               min="@Model.AbdomenMmMinMax.min"
               max="@Model.AbdomenMmMinMax.max"
               @bind="Model.AbdomenMm"
               @bind:event="oninput"
               @onchange="() => ModelChanged.InvokeAsync(Model)" />
    </div>
}
else
{
    <label>
        @localizer["Hip (mm)"]
    </label>
    <div class="input-group mb-3">
        <input type="number"
               class="form-control @(Model.HipMmValid ? "is-valid" : "is-invalid")"
               placeholder="@localizer["Hip (mm)"]"
               aria-label="@localizer["Hip (mm)"]"
               min="@Model.HipMmMinMax.min"
               max="@Model.HipMmMinMax.max"
               @bind="Model.HipMm"
               @bind:event="oninput"
               @onchange="() => ModelChanged.InvokeAsync(Model)" />
    </div>

    <label>
        @localizer["Tricep (mm)"]
    </label>
    <div class="input-group mb-3">
        <input type="number"
               class="form-control @(Model.TricepMmValid ? "is-valid" : "is-invalid")"
               placeholder="@localizer["Tricep (mm)"]"
               aria-label="@localizer["Tricep (mm)"]"
               min="@Model.TricepMmMinMax.min"
               max="@Model.TricepMmMinMax.max"
               @bind="Model.TricepMm"
               @bind:event="oninput"
               @onchange="() => ModelChanged.InvokeAsync(Model)" />
    </div>

}

<label>
    @localizer["Thigh (mm)"]
</label>
<div class="input-group mb-3">
    <input type="number"
           class="form-control @(Model.ThighMmValid ? "is-valid" : "is-invalid")"
           placeholder="@localizer["Thigh (mm)"]"
           aria-label="@localizer["Thigh (mm)"]"
           min="@Model.ThighMmMinMax.min"
           max="@Model.ThighMmMinMax.max"
           @bind="Model.ThighMm"
           @bind:event="oninput"
           @onchange="() => ModelChanged.InvokeAsync(Model)" />
</div>


<h5 class="m-0 py-1 text-dark">
    @string.Format("{0}: {1:P2}", localizer["Fat"], Model.FatPercentage)
    <small>
        <FatPercentageBracketComponent Male="@Model.Male" FatPercentage="@Model.FatPercentage" />
    </small>
</h5>

@code {
    [Parameter] public bool? Male { get; set; }

    [Parameter] public EventCallback<bool> MaleChanged { get; set; }

    [Parameter] public JacksonAndPollock3SiteSkinFoldModel Model { get; set; } = new JacksonAndPollock3SiteSkinFoldModel();

    [Parameter] public EventCallback<JacksonAndPollock3SiteSkinFoldModel> ModelChanged { get; set; }

    protected override void OnParametersSet()
    {
        if (Male.HasValue) Model.Male = Male.Value;
        base.OnParametersSet();
    }
}
