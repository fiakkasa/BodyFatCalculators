@if (Model.Gender == GenderType.Male || Model.Gender == GenderType.Female)
{
    <label>
        @localizer["Height (cm)"]
    </label>
    <div class="input-group mb-3">
        <input type="number"
               class="form-control @(Model.HeightCmValid ? "is-valid" : "is-invalid")"
               placeholder="@localizer["Height (cm)"]"
               aria-label="@localizer["Height (cm)"]"
               min="@Model.HeightCmMinMax.min"
               max="@Model.HeightCmMinMax.max"
               @bind="Model.HeightCm"
               @bind:event="oninput"
               @onchange="() => ModelChanged.InvokeAsync(Model)" />
    </div>

    <label>
        @localizer["Naval (cm)"]
    </label>
    <div class="input-group mb-3">
        <input type="number"
               class="form-control @(Model.NavalCmValid ? "is-valid" : "is-invalid")"
               placeholder="@localizer["Naval (cm)"]"
               aria-label="@localizer["Naval (cm)"]"
               min="@Model.NavalCmMinMax.min"
               max="@Model.NavalCmMinMax.max"
               @bind="Model.NavalCm"
               @bind:event="oninput"
               @onchange="() => ModelChanged.InvokeAsync(Model)" />
    </div>

    <label>
        @localizer["Neck (cm)"]
    </label>
    <div class="input-group mb-3">
        <input type="number"
               class="form-control @(Model.NeckCmValid ? "is-valid" : "is-invalid")"
               placeholder="@localizer["Neck (cm)"]"
               aria-label="@localizer["Neck (cm)"]"
               min="@Model.NeckMinMax.min"
               max="@Model.NeckMinMax.max"
               @bind="Model.NeckCm"
               @bind:event="oninput"
               @onchange="() => ModelChanged.InvokeAsync(Model)" />
    </div>
}

@if (Model.Gender == GenderType.Female)
{
    <label>
        @localizer["Hips (cm)"]
    </label>
    <div class="input-group mb-3">
        <input type="number"
               class="form-control @(Model.HipsCmValid ? "is-valid" : "is-invalid")"
               placeholder="@localizer["Hips (cm)"]"
               aria-label="@localizer["Hips (cm)"]"
               min="@Model.HipsCmMinMax.min"
               max="@Model.HipsCmMinMax.max"
               @bind="Model.HipsCm"
               @bind:event="oninput"
               @onchange="() => ModelChanged.InvokeAsync(Model)" />
    </div>
}

<FatPercentageAndBracketComponent Gender="@Model.Gender" FatPercentage="@Model.FatPercentage" />

@code {
    [Parameter] public USNavyModel Model { get; set; } = new USNavyModel();

    [Parameter] public EventCallback<USNavyModel> ModelChanged { get; set; }
}
